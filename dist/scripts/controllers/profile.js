define(["controllers/controllers","config"],function(e,t){e.controller("profileCtrl",["$rootScope","$scope","$q","$location","$window","$route","data","Store","Teams","Dater","$filter","TeamUp","$timeout",function(e,n,r,i,s,o,u,a,f,l,c,h,p){function v(t){n.views={profile:!1,edit:!1,editImg:!1},n.views[t]=!0,n.views.user=e.app.resources.uuid==o.current.params.userId}e.fixStyles(),n.self=this,n.roles=t.app.roles,n.mfuncs=t.app.mfunctions,n.data=u,n.noImgURL=t.app.noImgURL,n.profilemeta=u,n.profilemeta.birthday=c("nicelyDate")(u.birthDate),n.profile=angular.copy(n.profilemeta),n.currentRole=n.profilemeta.role,n.imgHost=t.app.host,n.ns=t.app.namespace;var d=[];n.selectTeams=a("app").get("teams");var d=n.$root.getTeamsofMembers(n.profilemeta.uuid);n.teams=d,n.forms={add:!1,edit:!1},v(i.hash()),n.setViewTo=function(e){n.$watch(i.hash(),function(){i.hash(e),v(e)})},n.save=function(t){if(n.currentRole!=t.role&&e.app.resources.uuid==t.uuid&&!confirm(e.ui.profile.roleChangePrompt))return;if(t.teamUuids==null||typeof t.teamUuids[0]=="undefined"){t.teamUuids=[],n.teams.length==0?t.teamUuids.push(sessionStorage.getItem(t.uuid+"_team")):t.teamUuids.push(n.teams[0].uuid);if(t.teamUuids[0]==null){e.notifier.error(e.ui.profile.specifyTeam);return}}if(t.newpass!=null&&t.newpass!=t.newpassrepeat){e.notifier.error(e.ui.profile.passNotMatch);return}t.newpass!=null&&(t.passwordHash=MD5.parse(t.newpass),delete t.newpass,delete t.newpassrepeat),e.statusBar.display(e.ui.profile.saveProfile);try{t.birthDate=l.convert.absolute(t.birthday,0)}catch(r){console.log(r),e.notifier.error(e.ui.teamup.birthdayError);return}delete t.birthday,h._("profileSave",{second:t.teamUuids[0],fourth:t.uuid},t).then(function(r){r.error?(e.notifier.error("Error with saving profile information."),console.warn("error ->",r)):(e.statusBar.display(e.ui.profile.refreshing),h._("profileGet",{third:o.current.params.userId},null,function(t){o.current.params.userId==e.app.resources.uuid&&(e.app.resources=r,a("app").save("resources",t))}).then(function(r){r.error?(e.notifier.error("Error with getting profile data."),console.warn("error ->",r)):(e.notifier.success(e.ui.profile.dataChanged),n.data=r,n.profileMeta=angular.copy(t),e.statusBar.off(),n.setViewTo("profile"),t.birthday=c("nicelyDate")(t.birthDate),e.app.resources.uuid==o.current.params.userId&&(e.app.resources.firstName=n.profileMeta.firstName,e.app.resources.lastName=n.profileMeta.lastName,n.currentRole!=t.role&&e.nav("logout")),angular.forEach(t.teamUuids,function(t){f.query(!1,{uuid:t}).then(function(){e.statusBar.off()})}))}))})},n.editProfile=function(){v("edit")},n.editImg=function(){n.uploadURL=n.imgHost+n.ns+"/team/member/"+o.current.params.userId+"/photo?square=true",n.setViewTo("editImg")},n.confirmDeleteProfile=function(){p(function(){angular.element("#confirmProfileModal").modal("show")})},n.deleteProfile=function(){angular.element("#confirmProfileModal").modal("hide"),e.statusBar.display(e.ui.teamup.deletingMember);var t;angular.forEach(n.teams,function(t){h._("teamMemberDelete",{second:t.uuid},{ids:[n.profilemeta.uuid]}).then(function(r){e.notifier.success(e.ui.teamup.dataChanged),angular.forEach(n.profilemeta.teamUuids,function(r,i){t.uuid==r&&(e.statusBar.display(e.ui.teamup.refreshing),f.query(!1,{uuid:r}).then(function(){e.statusBar.off()}),n.profilemeta.teamUuids.splice(i,1),n.teams.splice(i,1),sessionStorage.removeItem(u.uuid+"_team"),f.updateMembersLocal())})},function(e){console.log(e)}),h._("teamMemberFree").then(function(t){a("app").save("members",t),e.statusBar.off()},function(e){console.log(e)})})}}])});